name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build_windows:
    strategy:
      matrix:
        cfg: [Release, Debug]
        
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build

    - name: Build Project
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{ matrix.cfg }}

    - name: Install Project
      # Install your program with the given configuration
      run: cmake --install ${{github.workspace}}/build --config ${{ matrix.cfg }} --prefix ${{github.workspace}}/install

  build_linux:
    strategy:
      matrix:
        cfg: [Release, Debug]
        
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Environment
      run: |
        sudo apt update -qq
        sudo apt install gcc-multilib
        sudo apt install -y --no-install-recommends libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libxext-dev libxfixes-dev
 
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build

    - name: Build Project
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{ matrix.cfg }}

    - name: Install Project
      # Install your program with the given configuration
      run: cmake --install ${{github.workspace}}/build --config ${{ matrix.cfg }} --prefix ${{github.workspace}}/install

    
